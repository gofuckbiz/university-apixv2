# Документация API университета

Этот API предоставляет эндпоинты для управления информацией о вузе, преподавателях и студентах. API разработан на Node.js и работает по адресу `http://localhost:3000`.

## Базовый URL
`http://localhost:3000`

## Эндпоинты

### Информация о вузе
#### GET /about
- **Описание**: Получение общей информации о вузе.
- **Метод**: GET
- **Параметры**: Отсутствуют
- **Ответ**:
  - **Статус**: 200 OK
  - **Тело**: JSON-объект с информацией о вузе (например, `{ "text": "Информация о нашем вузе." }`)
- **Пример**:
  ```bash
  curl http://localhost:3000/about
  ```

#### PUT /api/about
- **Описание**: Обновление информации о вузе.
- **Метод**: PUT
- **Тело запроса** (JSON):
  ```json
  { "text": "Новая информация о нашем вузе." }
  ```
- **Ответ**:
  - **Статус**: 200 OK или 204 No Content
  - **Тело**: Сообщение о подтверждении (например, `{ "message": "Информация обновлена." }`)
- **Пример**:
  ```bash
  curl -X PUT -H "Content-Type: application/json" -d '{"text":"Новая информация о нашем вузе."}' http://localhost:3000/api/about
  ```

### Преподаватели
#### GET /api/teachers
- **Описание**: Получение списка всех преподавателей или отфильтрованных по параметрам запроса.
- **Метод**: GET
- **Параметры запроса** (опционально):
  - `age` (число): Фильтр по возрасту преподавателя.
  - `subject` (строка): Фильтр по преподаваемому предмету (регистр не учитывается).
- **Ответ**:
  - **Статус**: 200 OK
  - **Тело**: Массив объектов преподавателей (например, `[{ "id": "uuid", "name": "Иван Петров", "age": 45, "subject": "Математика" }, ...]`)
  - **Ошибки**:
    - 404 Not Found: `{ "message": "Преподаватели по указанным критериям не найдены." }`
    - 400 Bad Request: `{ "message": "Параметр 'age' должен быть числом." }`
- **Примеры**:
  - Все преподаватели:
    ```bash
    curl http://localhost:3000/api/teachers
    ```
  - Преподаватели 37 лет:
    ```bash
    curl http://localhost:3000/api/teachers?age=37
    ```
  - Преподаватели, преподающие математику:
    ```bash
    curl http://localhost:3000/api/teachers?subject=Математика
    ```
  - Преподаватели 45 лет, преподающие математику:
    ```bash
    curl http://localhost:3000/api/teachers?age=45&subject=Математика
    ```

#### POST /api/teachers
- **Описание**: Создание нового преподавателя.
- **Метод**: POST
- **Тело запроса** (JSON):
  ```json
  { "name": "Сергей Волков", "age": 52, "subject": "История" }
  ```
- **Ответ**:
  - **Статус**: 201 Created
  - **Тело**: `{ "message": "Преподаватель успешно создан.", "teacher": { "id": "uuid", "name": "Сергей Волков", "age": 52, "subject": "История" } }`
  - **Ошибки**:
    - 400 Bad Request: `{ "message": "Поле 'name' обязательно и должно быть непустой строкой." }`
- **Пример**:
  ```bash
  curl -X POST -H "Content-Type: application/json" -d '{"name":"Сергей Волков","age":52,"subject":"История"}' http://localhost:3000/api/teachers
  ```

#### PUT /api/teachers/:id
- **Описание**: Обновление информации о существующем преподавателе.
- **Метод**: PUT
- **Параметры URL**:
  - `id` (строка): UUID преподавателя.
- **Тело запроса** (JSON, все поля опциональны):
  ```json
  { "age": 53, "subject": "Древняя История", "name": "Новое Имя" }
  ```
- **Ответ**:
  - **Статус**: 200 OK
  - **Тело**: `{ "message": "Данные преподавателя успешно обновлены.", "teacher": { "id": "uuid", "name": "Новое Имя", "age": 53, "subject": "Древняя История" } }`
  - **Ошибки**:
    - 400 Bad Request: `{ "message": "Поле 'age' должно быть положительным числом." }`
    - 404 Not Found: `{ "message": "Преподаватель с таким ID не найден." }`
- **Пример**:
  ```bash
  curl -X PUT -H "Content-Type: application/json" -d '{"age":53,"subject":"Древняя История"}' http://localhost:3000/api/teachers/1f67dfe8-750d-47fb-b356-12de8da1d7b5
  ```

#### DELETE /api/teachers/:id
- **Описание**: Удаление преподавателя по ID.
- **Метод**: DELETE
- **Параметры URL**:
  - `id` (строка): UUID преподавателя.
- **Ответ**:
  - **Статус**: 200 OK
  - **Тело**: `{ "message": "Преподаватель успешно удален." }`
  - **Ошибки**:
    - 404 Not Found: `{ "message": "Преподаватель с таким ID не найден." }`
- **Пример**:
  ```bash
  curl -X DELETE http://localhost:3000/api/teachers/1f67dfe8-750d-47fb-b356-12de8da1d7b5
  ```

### Студенты
#### GET /api/students
- **Описание**: Получение списка всех студентов или отфильтрованных по параметрам запроса.
- **Метод**: GET
- **Параметры запроса** (опционально):
  - `age` (число): Фильтр по возрасту студента.
  - `course` (число): Фильтр по номеру курса.
- **Ответ**:
  - **Статус**: 200 OK
  - **Тело**: Массив объектов студентов (например, `[{ "id": "uuid", "name": "Мария Смирнова", "age": 20, "course": 2 }, ...]`)
  - **Ошибки**: 404 Not Found: `{ "message": "Студенты по указанным критериям не найдены." }`
- **Примеры**:
  - Все студенты:
    ```bash
    curl http://localhost:3000/api/students
    ```
  - Студенты 20 лет:
    ```bash
    curl http://localhost:3000/api/students?age=20
    ```
  - Студенты 2-го курса:
    ```bash
    curl http://localhost:3000/api/students?course=2
    ```

#### POST /api/students
- **Описание**: Создание нового студента.
- **Метод**: POST
- **Тело запроса** (JSON):
  ```json
  { "name": "Мария Смирнова", "age": 18, "course": 1 }
  ```
- **Ответ**:
  - **Статус**: 201 Created
  - **Тело**: `{ "message": "Студент успешно создан.", "student": { "id": "uuid", "name": "Мария Смирнова", "age": 18, "course": 1 } }`
  - **Ошибки**:
    - 400 Bad Request: `{ "message": "Поле 'name' обязательно и должно быть непустой строкой." }`
- **Пример**:
  ```bash
  curl -X POST -H "Content-Type: application/json" -d '{"name":"Мария Смирнова","age":18,"course":1}' http://localhost:3000/api/students
  ```

#### PUT /api/students/:id
- **Описание**: Обновление информации о существующем студенте.
- **Метод**: PUT
- **Параметры URL**:
  - `id` (строка): UUID студента.
- **Тело запроса** (JSON, все поля опциональны):
  ```json
  { "age": 19, "name": "Мария Смирнова-Белова", "course": 2 }
  ```
- **Ответ**:
  - **Статус**: 200 OK
  - **Тело**: `{ "message": "Данные студента успешно обновлены.", "student": { "id": "uuid", "name": "Мария Смирнова-Белова", "age": 19, "course": 2 } }`
  - **Ошибки**:
    - 400 Bad Request: `{ "message": "Поле 'age' должно быть положительным числом." }`
    - 404 Not Found: `{ "message": "Студент с таким ID не найден." }`
- **Пример**:
  ```bash
  curl -X PUT -H "Content-Type: application/json" -d '{"age":19,"name":"Мария Смирнова-Белова"}' http://localhost:3000/api/students/<student-id>
  ```

#### DELETE /api/students/:id
- **Описание**: Удаление студента по ID.
- **Метод**: DELETE
- **Параметры URL**:
  - `id` (строка): UUID студента.
- **Ответ**:
  - **Статус**: 200 OK
  - **Тело**: `{ "message": "Студент успешно удален." }`
  - **Ошибки**:
    - 404 Not Found: `{ "message": "Студент с таким ID не найден." }`
- **Пример**:
  ```bash
  curl -X DELETE http://localhost:3000/api/students/<student-id>
  ```

## Установка и использование
1. **Требования**:
   - Node.js (версия 14 или выше)
   - npm или yarn

2. **Установка**:
   ```bash
   git clone <URL-репозитория>
   cd university-api
   npm install
   ```

3. **Запуск сервера**:
   ```bash
   npm start
   ```
   Сервер запустится по адресу `http://localhost:3000`.

4. **Тестирование API**:
   - Используйте инструменты, такие как [Postman](https://www.postman.com/) или `curl`, для отправки запросов.
   - Убедитесь, что заголовок `Content-Type: application/json` указан для запросов POST и PUT.
   - Заменяйте `<student-id>` или `<teacher-id>` на действительные UUID из базы данных.

## Примечания
- Все эндпоинты для POST и PUT ожидают тело запроса в формате JSON.
- UUID используются как уникальные идентификаторы для преподавателей и студентов.
- Параметры запроса для предметов нечувствительны к регистру (например, "Математика" совпадает с "математика").
- Убедитесь, что сервер запущен, а база данных (`db.teachers` и `db.students`) корректно инициализирована.

## Устранение неполадок
- **Ошибка: `Cannot destructure property 'age' of 'req.body' as it is undefined`**:
  - Убедитесь, что заголовок `Content-Type: application/json` указан в запросе.
  - Проверьте, что тело запроса содержит валидный JSON и не пустое.
  - Убедитесь, что `app.use(express.json())` добавлен в настройку сервера.
- **Ошибка: 404 Not Found**:
  - Проверьте, существует ли указанный UUID в базе данных (используйте GET `/api/teachers` или `/api/students`).
- **Ошибка: 400 Bad Request**:
  - Проверьте тело запроса или параметры запроса на соответствие ожидаемым типам (например, `age` должен быть числом).
